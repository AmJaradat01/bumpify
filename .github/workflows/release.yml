name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  VERSION: 1.0.8

jobs:
  # Job for setting up, installing dependencies, and signing
  setup_and_sign:
    name: Setup, Install, and Sign
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm install

      # Install Cosign for signing the build
      - name: Install Cosign
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/download/v1.4.1/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      # Sign the package files using cosign
      - name: Sign package files
        run: |
          echo "${{ secrets.COSIGN_PASSWORD }}" | cosign sign-blob --key <(echo "${{ secrets.COSIGN_KEY }}") package.json
          echo "${{ secrets.COSIGN_PASSWORD }}" | cosign sign-blob --key <(echo "${{ secrets.COSIGN_KEY }}") package-lock.json
          echo "${{ secrets.COSIGN_PASSWORD }}" | cosign sign-blob --key <(echo "${{ secrets.COSIGN_KEY }}") README.md
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

  # Job for publishing to npm
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: setup_and_sign

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Pull, Commit, and Push Version Bump (if necessary)
      - name: Pull, Commit, and Push
        run: |
          git config --global user.email "amjaradat01@gmail.com"
          git config --global user.name "Ali Jaradat"
          
          # Add any changes to version-controlled files
          git add package.json package-lock.json README.md .github/workflows/release.yml
          
          # Commit changes (if there are any)
          git commit -m "chore: prepare release for ${{ env.VERSION }}" || echo "No changes to commit"
          
          # Pull the latest changes from the remote main branch
          git pull origin main --rebase
          
          # Push the changes to main
          git push origin main
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job for creating GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check if Tag Exists
        id: tag_exists
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} already exists."
            exit 1
          else
            echo "Tag v${{ env.VERSION }} does not exist."
          fi

      - name: Create GitHub Release (only if tag doesn't exist)
        if: steps.tag_exists.outputs.exitcode != '1'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
