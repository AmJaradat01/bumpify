name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  VERSION: 1.0.8

jobs:
  # Job 1: Checkout the repository
  checkout_repo:
    name: Checkout Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./  # Ensure the repository is checked out into the current directory

  # Job 2: Setup Node.js and install dependencies
  setup_node:
    name: Setup Node.js and Install Dependencies
    runs-on: ubuntu-latest
    needs: checkout_repo
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm install
        working-directory: ./  # Make sure this points to the correct directory

  # Job 3: Install Cosign
  install_cosign:
    name: Install Cosign
    runs-on: ubuntu-latest
    needs: setup_node
    steps:
      - name: Install Cosign
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/download/v1.4.1/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        working-directory: ./  # Ensure we are in the root directory

  # Job 4: Sign files
  sign_files:
    name: Sign Files
    runs-on: ubuntu-latest
    needs: install_cosign
    steps:
      - name: Inject Key from Secrets
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          chmod 600 cosign.key
        working-directory: ./  # Ensure this is executed in the root directory

      - name: Sign package files
        run: |
          cosign sign-blob --key cosign.key package.json
          cosign sign-blob --key cosign.key package-lock.json
          cosign sign-blob --key cosign.key README.md
        working-directory: ./  # Ensure this points to the correct directory

  # Job 5: Pull, commit, and push version bump (if needed)
  push_changes:
    name: Commit and Push Changes
    runs-on: ubuntu-latest
    needs: sign_files
    steps:
      - name: Pull, Commit, and Push
        run: |
          git config --global user.email "amjaradat01@gmail.com"
          git config --global user.name "Ali Jaradat"
          
          # Add any changes to version-controlled files
          git add package.json package-lock.json README.md .github/workflows/release.yml
          
          # Commit changes (if there are any)
          git commit -m "chore: prepare release for ${{ env.VERSION }}" || echo "No changes to commit"
          
          # Pull the latest changes from the remote main branch
          git pull origin main --rebase
          
          # Push the changes to main
          git push origin main
        working-directory: ./  # Ensure this points to the correct directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Publish to npm
  publish_to_npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: push_changes
    steps:
      - name: Publish to npm
        run: npm publish --access public
        working-directory: ./  # Ensure this points to the correct directory
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 7: Create GitHub Release
  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish_to_npm
    steps:
      - name: Check if Tag Exists
        id: tag_exists
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} already exists."
            exit 1
          else
            echo "Tag v${{ env.VERSION }} does not exist."
          fi
        working-directory: ./  # Ensure this points to the correct directory

      - name: Create GitHub Release (only if tag doesn't exist)
        if: steps.tag_exists.outputs.exitcode != '1'
        uses: actions/create-release@v1
        working-directory: ./  # Ensure this points to the correct directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
