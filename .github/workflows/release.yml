name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  VERSION: 1.0.6

jobs:
  release:
    name: Release and Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          registry-url: 'https://registry.npmjs.org'

      - name: Install version-bumpify
        run: npm install -g version-bumpify

      - name: Install Dependencies
        run: npm install

      # Use version-bumpify to bump the version using the centralized version value
      - name: Bump version manually using version-bumpify
        run: |
          bumpify ${{ env.VERSION }}  # Use the centralized version value

      # Commit and push the new version to the main branch
      - name: Pull, Commit, and Push Version Bump
        run: |
          git config --global user.email "amjaradat01@gmail.com"
          git config --global user.name "Ali Jaradat"
          
          # Add version bump changes
          git add package.json package-lock.json README.md
          
          # Commit version bump changes
          git commit -m "chore: bump version to ${{ env.VERSION }}" || echo "No changes to commit"
          
          # Pull the latest changes from the remote main branch
          git pull origin main --rebase
          
          # Push the changes to main
          git push origin main
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish to npm
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Optionally create a GitHub release only if the tag doesn't exist
      - name: Check if Tag Exists
        id: tag_exists
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} already exists."
            exit 1
          else
            echo "Tag v${{ env.VERSION }} does not exist."
          fi

      - name: Create GitHub Release (only if tag doesn't exist)
        if: steps.tag_exists.outputs.exitcode != '1'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
